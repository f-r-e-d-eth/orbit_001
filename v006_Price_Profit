#!/usr/bin/python3
import math
import plotly.graph_objects as go

#       #   Name   Product [Price in SWAY/kg, Available mass in kg]
data = [ [123,"Rock A",[ # Price, Volume
               ["Product A", 30 , 1000],
               ["Product B", 20 ,  200],
               ["Product C", 10 ,   50]
         ]],
         [999,"Rock B",[
               ["Product A", 35 , 1000],
               ["Product B", 30 ,  200],
               ["Product C", 20 ,  150]
         ]]
       ]

def PriceVolume(InitialPrice,InitialVolume,BuyVolume):
    # price x availability = constant
    if InitialVolume <= BuyVolume:
     return -1
    else:
     return InitialPrice * InitialVolume / (InitialVolume-BuyVolume)

def TotalPriceVolume(InitialPrice,InitialVolume,MaxBuyVolume):
    # Integral InitialPrice * InitialVolume / (InitialVolume-BuyVolume) d_BuyVolume
    #  = - InitialPrice * InitialVolume * log( InitialVolume - BuyVolume )
    #  for BuyVolume form 0 to MaxBuyVolume
    #  = -InitialPrice * InitialVolume * log( 1 - MaxBuyVolume / InitialVolume )
    if InitialVolume <= MaxBuyVolume:
     return -1
    else:
     if MaxBuyVolume > 0:
      return -InitialPrice * InitialVolume * math.log( 1 - MaxBuyVolume / InitialVolume  )
     else:
      return  InitialPrice * InitialVolume * math.log( 1 - MaxBuyVolume / InitialVolume  )

def ProfitVolume(BuyRock, SellRock, Product, Volume, data):
    InitialPrice  = data[BuyRock][2][Product][1]
    InitialVolume = data[BuyRock][2][Product][2]
    Pr_Buy  = PriceVolume(InitialPrice,InitialVolume,Volume)
    if Pr_Buy == -1:
     return 0
    InitialPrice  = data[SellRock][2][Product][1]
    InitialVolume = data[SellRock][2][Product][2]
    Pr_Sell = PriceVolume(InitialPrice,InitialVolume,-Volume)
    if Pr_Sell == -1:
     return 0
    return Pr_Sell - Pr_Buy

def TradeListVolume(MaxVolume,data):

    VolumeSteps = 20
    VolumeStep  = MaxVolume/VolumeSteps
    NoOfProducts = 3

    BuyVolume = [0]*NoOfProducts

    for i in range(1,VolumeSteps+1):
     max_Profit = 0
     max_Profit_Product = 0
 
     for Product in range(0,NoOfProducts):
      NewProductVolume = BuyVolume[Product] + VolumeStep
      Profit = ProfitVolume( 0, 1, Product, NewProductVolume, data)
      if max_Profit < Profit:
       max_Profit = Profit
       max_Profit_Product = Product
 
     BuyVolume[max_Profit_Product] += VolumeStep

    return BuyVolume

def ProfitBuyVolume(BuyVolume,data):

    NoOfProducts = 3

    # Determine the profit
    TotalBuyPrice  = 0
    TotalSellPrice = 0
    for i in range(0,NoOfProducts):
     TotalBuyPrice +=TotalPriceVolume(data[0][2][i][1],data[0][2][i][2], BuyVolume[i])
     TotalSellPrice+=TotalPriceVolume(data[1][2][i][1],data[1][2][i][2],-BuyVolume[i])
     #print(str(TotalBuyPrice)+" "+str(TotalSellPrice))

    return TotalSellPrice-TotalBuyPrice,TotalSellPrice,TotalBuyPrice

MaxVolume = 100
VolumeSteps = 20
VolumeStep  = MaxVolume/VolumeSteps
NoOfProducts = 3

Trade_Volume = [0]
Profit_Volume_00 = [0]
Profit_Volume_05 = [0]
Profit_Volume_10 = [0]
Profit_Volume_15 = [0]

for TradeVolume in range(int(MaxVolume/10),MaxVolume,int(MaxVolume/10)):

 TradeVolumeList = TradeListVolume(TradeVolume,data)
 Profit,BuyPrice,SellPrice = ProfitBuyVolume(TradeVolumeList,data)

 print(TradeVolumeList)
 print(str(round(Profit))+" "+str(round(Profit/BuyPrice*100)))
 Trade_Volume.append(TradeVolume)
 Profit_Volume_00.append(Profit)
 Profit_Volume_05.append(Profit-BuyPrice*0.05)
 Profit_Volume_10.append(Profit-BuyPrice*0.10)
 Profit_Volume_15.append(Profit-BuyPrice*0.15)

# plot results

xx=[]
yy=[]

for i in range(0,NoOfProducts):
 xx.extend([TradeVolumeList[i],TradeVolumeList[i],''])
 yy0 = PriceVolume(data[0][2][i][1],data[0][2][i][2],TradeVolumeList[i])
 yy1 = PriceVolume(data[1][2][i][1],data[1][2][i][2],-TradeVolumeList[i])
 yy.extend([yy0,yy1,''])


Volume = []
BuyPrice = []
SellPrice = []

for i in range(0,NoOfProducts):
 BuyPrice.append([])
 SellPrice.append([])

for i in range(0,VolumeSteps):
 BuyVolume = i*VolumeStep
 Volume.append(BuyVolume)
 for i2 in range(0,NoOfProducts):

  BuyPr = PriceVolume(data[0][2][i2][1],data[0][2][i2][2], BuyVolume)
  SellPr= PriceVolume(data[1][2][i2][1],data[1][2][i2][2],-BuyVolume)
  if BuyPr!=-1 and SellPr!=-1:
   BuyPrice[i2].append(BuyPr)
   SellPrice[i2].append(SellPr)

# Plot
fig = go.Figure()

fig.update_layout(paper_bgcolor="#000000")
fig.update_layout(plot_bgcolor ="#000000")
fig.update_xaxes(showline=True, linewidth=1, linecolor='black', gridcolor='grey',zeroline=True, zerolinewidth=2, zerolinecolor='grey')
fig.update_yaxes(showline=True, linewidth=1, linecolor='black', gridcolor='grey',zeroline=True, zerolinewidth=2, zerolinecolor='grey')

fig.update_layout(legend=dict(font=dict(family="Courier",size=12,color="#000000"),
        bgcolor="LightSteelBlue",bordercolor="Black",borderwidth=2)
)

fig.add_trace(go.Scatter(x=Volume, y=BuyPrice[0], mode='markers+lines', name='Buy Price A',
                                     marker=dict(color='#ff0000',size=10) ))
fig.add_trace(go.Scatter(x=Volume, y=SellPrice[0], mode='markers+lines', name='Sell Price A',
                                     marker=dict(color='#990000',size=10) ))

fig.add_trace(go.Scatter(x=Volume, y=BuyPrice[1], mode='markers+lines', name='Buy Price B',
                                     marker=dict(color='#00ff00',size=10) ))
fig.add_trace(go.Scatter(x=Volume, y=SellPrice[1], mode='markers+lines', name='Sell Price B',
                                     marker=dict(color='#009900',size=10) ))

fig.add_trace(go.Scatter(x=Volume, y=BuyPrice[2], mode='markers+lines', name='Buy Price C',
                                     marker=dict(color='#0000ff',size=10) ))
fig.add_trace(go.Scatter(x=Volume, y=SellPrice[2], mode='markers+lines', name='Sell Price C',
                                     marker=dict(color='#000099',size=10) ))

fig.add_trace(go.Scatter(x=xx, y=yy, mode='markers+lines', name='Volume',
                                     marker=dict(color='#ffffff',size=10) ))

fig.show()

#################

fig2 = go.Figure()

fig2.update_layout(paper_bgcolor="#000000")
fig2.update_layout(plot_bgcolor ="#000000")
fig2.update_xaxes(showline=True, linewidth=1, linecolor='black', gridcolor='grey',zeroline=True, zerolinewidth=2, zerolinecolor='grey')
fig2.update_yaxes(showline=True, linewidth=1, linecolor='black', gridcolor='grey',zeroline=True, zerolinewidth=2, zerolinecolor='grey')

fig2.update_layout(legend=dict(font=dict(family="Courier",size=12,color="#000000"),
        bgcolor="LightSteelBlue",bordercolor="Black",borderwidth=2)
)

fig2.add_trace(go.Scatter(x=Trade_Volume, y=Profit_Volume_00, mode='markers+lines', name='Profit (Free Fuel)',
                                     marker=dict(color='#ff0000',size=10) ))

fig2.add_trace(go.Scatter(x=Trade_Volume, y=Profit_Volume_05, mode='markers+lines', name='Profit  -5% Fuel cost',
                                     marker=dict(color='#cc0000',size=10) ))

fig2.add_trace(go.Scatter(x=Trade_Volume, y=Profit_Volume_10, mode='markers+lines', name='Profit -10% Fuel cost',
                                     marker=dict(color='#990000',size=10) ))

fig2.add_trace(go.Scatter(x=Trade_Volume, y=Profit_Volume_15, mode='markers+lines', name='Profit -15% Fuel cost',
                                     marker=dict(color='#660000',size=10) ))

fig2.show()
